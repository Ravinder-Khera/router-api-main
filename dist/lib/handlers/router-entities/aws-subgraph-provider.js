import { Protocol } from '@uniswap/router-sdk';
import { log, } from '@uniswap/smart-order-router';
import { S3 } from 'aws-sdk';
import NodeCache from 'node-cache';
import { S3_POOL_CACHE_KEY } from '../../util/pool-cache-key';
const POOL_CACHE = new NodeCache({ stdTTL: 240, useClones: false });
const LOCAL_POOL_CACHE_KEY = (chainId, protocol) => `pools${chainId}#${protocol}`;
export class AWSSubgraphProvider {
    constructor(chain, protocol, bucket, baseKey) {
        this.chain = chain;
        this.protocol = protocol;
        this.bucket = bucket;
        this.baseKey = baseKey;
    }
    async getPools() {
        log.info(`In new AWS subgraph provider for protocol ${this.protocol}`);
        const cachedPools = POOL_CACHE.get(LOCAL_POOL_CACHE_KEY(this.chain, this.protocol));
        if (cachedPools) {
            log.info({ subgraphPoolsSample: cachedPools.slice(0, 5) }, `Subgraph pools fetched from local cache for protocol ${this.protocol}. Num: ${cachedPools.length}`);
            return cachedPools;
        }
        log.info({ bucket: this.bucket, key: this.baseKey }, `Subgraph pools local cache miss for protocol ${this.protocol}. Getting subgraph pools from S3`);
        const s3 = new S3();
        const pools = await cachePoolsFromS3(s3, this.bucket, this.baseKey, this.chain, this.protocol);
        return pools;
    }
}
export const cachePoolsFromS3 = async (s3, bucket, baseKey, chainId, protocol) => {
    const key = S3_POOL_CACHE_KEY(baseKey, chainId, protocol);
    let result;
    try {
        result = await s3.getObject({ Key: key, Bucket: bucket }).promise();
    }
    catch (err) {
        log.error({ bucket, key, err }, `Failed to get pools from S3 for ${protocol} on chain ${chainId}`);
        throw new Error(`Failed to get pools from S3 for ${protocol} on chain ${chainId}`);
    }
    const { Body: poolsBuffer } = result;
    if (!poolsBuffer) {
        throw new Error(`Could not get subgraph pool cache from S3 for protocol ${protocol} on chain ${chainId}`);
    }
    const pools = JSON.parse(poolsBuffer.toString('utf-8'));
    log.info({ bucket, key }, `Got subgraph pools from S3 for protocol ${protocol} on ${chainId}. Num: ${pools.length}`);
    POOL_CACHE.set(LOCAL_POOL_CACHE_KEY(chainId, protocol), pools);
    return pools;
};
export class V3AWSSubgraphProvider extends AWSSubgraphProvider {
    constructor(chainId, bucket, baseKey) {
        super(chainId, Protocol.V3, bucket, baseKey);
    }
    static async EagerBuild(bucket, baseKey, chainId) {
        const s3 = new S3();
        await cachePoolsFromS3(s3, bucket, baseKey, chainId, Protocol.V3);
        return new V3AWSSubgraphProvider(chainId, bucket, baseKey);
    }
}
export class V2AWSSubgraphProvider extends AWSSubgraphProvider {
    constructor(chainId, bucket, key) {
        super(chainId, Protocol.V2, bucket, key);
    }
    static async EagerBuild(bucket, baseKey, chainId) {
        const s3 = new S3();
        await cachePoolsFromS3(s3, bucket, baseKey, chainId, Protocol.V2);
        return new V2AWSSubgraphProvider(chainId, bucket, baseKey);
    }
}
//# sourceMappingURL=data:application/json;base64,