import { CachingTokenListProvider, log, NodeJSCache, } from '@uniswap/smart-order-router';
import S3 from 'aws-sdk/clients/s3';
import NodeCache from 'node-cache';
const TOKEN_LIST_CACHE = new NodeCache({ stdTTL: 600, useClones: false });
export class AWSTokenListProvider extends CachingTokenListProvider {
    static async fromTokenListS3Bucket(chainId, bucket, tokenListURI) {
        const s3 = new S3();
        const cachedTokenList = TOKEN_LIST_CACHE.get(tokenListURI);
        const tokenCache = new NodeCache({ stdTTL: 360, useClones: false });
        if (cachedTokenList) {
            log.info(`Found token lists for ${tokenListURI} in local cache`);
            return super.fromTokenList(chainId, cachedTokenList, new NodeJSCache(tokenCache));
        }
        try {
            log.info(`Getting tokenLists from s3.`);
            const tokenListResult = await s3.getObject({ Key: encodeURIComponent(tokenListURI), Bucket: bucket }).promise();
            const { Body: tokenListBuffer } = tokenListResult;
            if (!tokenListBuffer) {
                return super.fromTokenListURI(chainId, tokenListURI, new NodeJSCache(tokenCache));
            }
            const tokenList = JSON.parse(tokenListBuffer.toString('utf-8'));
            log.info(`Got both tokenLists from s3. ${tokenList.tokens.length} tokens in main list.`);
            TOKEN_LIST_CACHE.set(tokenListURI, tokenList);
            return new CachingTokenListProvider(chainId, tokenList, new NodeJSCache(tokenCache));
        }
        catch (err) {
            log.info({ err }, `Failed to get tokenLists from s3.`);
            return super.fromTokenListURI(chainId, tokenListURI, new NodeJSCache(tokenCache));
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzLXRva2VuLWxpc3QtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvaGFuZGxlcnMvcm91dGVyLWVudGl0aWVzL2F3cy10b2tlbi1saXN0LXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx3QkFBd0IsRUFHeEIsR0FBRyxFQUNILFdBQVcsR0FDWixNQUFNLDZCQUE2QixDQUFBO0FBR3BDLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBQ25DLE9BQU8sU0FBUyxNQUFNLFlBQVksQ0FBQTtBQUVsQyxNQUFNLGdCQUFnQixHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtBQUV6RSxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsd0JBQXdCO0lBQ3pELE1BQU0sQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQ3ZDLE9BQWdCLEVBQ2hCLE1BQWMsRUFDZCxZQUFvQjtRQUVwQixNQUFNLEVBQUUsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFBO1FBRW5CLE1BQU0sZUFBZSxHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBWSxZQUFZLENBQUMsQ0FBQTtRQUVyRSxNQUFNLFVBQVUsR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7UUFFbkUsSUFBSSxlQUFlLEVBQUU7WUFDbkIsR0FBRyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsWUFBWSxpQkFBaUIsQ0FBQyxDQUFBO1lBQ2hFLE9BQU8sS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsZUFBZSxFQUFFLElBQUksV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7U0FDbEY7UUFFRCxJQUFJO1lBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO1lBQ3ZDLE1BQU0sZUFBZSxHQUFHLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtZQUUvRyxNQUFNLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxHQUFHLGVBQWUsQ0FBQTtZQUVqRCxJQUFJLENBQUMsZUFBZSxFQUFFO2dCQUNwQixPQUFPLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLElBQUksV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7YUFDbEY7WUFFRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQWMsQ0FBQTtZQUU1RSxHQUFHLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLENBQUMsQ0FBQTtZQUV4RixnQkFBZ0IsQ0FBQyxHQUFHLENBQVksWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFBO1lBRXhELE9BQU8sSUFBSSx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7U0FDckY7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxtQ0FBbUMsQ0FBQyxDQUFBO1lBQ3RELE9BQU8sS0FBSyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsSUFBSSxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtTQUNsRjtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENhY2hpbmdUb2tlbkxpc3RQcm92aWRlcixcbiAgSVRva2VuTGlzdFByb3ZpZGVyLFxuICBJVG9rZW5Qcm92aWRlcixcbiAgbG9nLFxuICBOb2RlSlNDYWNoZSxcbn0gZnJvbSAnQHVuaXN3YXAvc21hcnQtb3JkZXItcm91dGVyJ1xuaW1wb3J0IHsgQ2hhaW5JZCB9IGZyb20gJ0B1bmlzd2FwL3Nkay1jb3JlJ1xuaW1wb3J0IHsgVG9rZW5MaXN0IH0gZnJvbSAnQHVuaXN3YXAvdG9rZW4tbGlzdHMnXG5pbXBvcnQgUzMgZnJvbSAnYXdzLXNkay9jbGllbnRzL3MzJ1xuaW1wb3J0IE5vZGVDYWNoZSBmcm9tICdub2RlLWNhY2hlJ1xuXG5jb25zdCBUT0tFTl9MSVNUX0NBQ0hFID0gbmV3IE5vZGVDYWNoZSh7IHN0ZFRUTDogNjAwLCB1c2VDbG9uZXM6IGZhbHNlIH0pXG5cbmV4cG9ydCBjbGFzcyBBV1NUb2tlbkxpc3RQcm92aWRlciBleHRlbmRzIENhY2hpbmdUb2tlbkxpc3RQcm92aWRlciB7XG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgZnJvbVRva2VuTGlzdFMzQnVja2V0KFxuICAgIGNoYWluSWQ6IENoYWluSWQsXG4gICAgYnVja2V0OiBzdHJpbmcsXG4gICAgdG9rZW5MaXN0VVJJOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxJVG9rZW5MaXN0UHJvdmlkZXIgJiBJVG9rZW5Qcm92aWRlcj4ge1xuICAgIGNvbnN0IHMzID0gbmV3IFMzKClcblxuICAgIGNvbnN0IGNhY2hlZFRva2VuTGlzdCA9IFRPS0VOX0xJU1RfQ0FDSEUuZ2V0PFRva2VuTGlzdD4odG9rZW5MaXN0VVJJKVxuXG4gICAgY29uc3QgdG9rZW5DYWNoZSA9IG5ldyBOb2RlQ2FjaGUoeyBzdGRUVEw6IDM2MCwgdXNlQ2xvbmVzOiBmYWxzZSB9KVxuXG4gICAgaWYgKGNhY2hlZFRva2VuTGlzdCkge1xuICAgICAgbG9nLmluZm8oYEZvdW5kIHRva2VuIGxpc3RzIGZvciAke3Rva2VuTGlzdFVSSX0gaW4gbG9jYWwgY2FjaGVgKVxuICAgICAgcmV0dXJuIHN1cGVyLmZyb21Ub2tlbkxpc3QoY2hhaW5JZCwgY2FjaGVkVG9rZW5MaXN0LCBuZXcgTm9kZUpTQ2FjaGUodG9rZW5DYWNoZSkpXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGxvZy5pbmZvKGBHZXR0aW5nIHRva2VuTGlzdHMgZnJvbSBzMy5gKVxuICAgICAgY29uc3QgdG9rZW5MaXN0UmVzdWx0ID0gYXdhaXQgczMuZ2V0T2JqZWN0KHsgS2V5OiBlbmNvZGVVUklDb21wb25lbnQodG9rZW5MaXN0VVJJKSwgQnVja2V0OiBidWNrZXQgfSkucHJvbWlzZSgpXG5cbiAgICAgIGNvbnN0IHsgQm9keTogdG9rZW5MaXN0QnVmZmVyIH0gPSB0b2tlbkxpc3RSZXN1bHRcblxuICAgICAgaWYgKCF0b2tlbkxpc3RCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmZyb21Ub2tlbkxpc3RVUkkoY2hhaW5JZCwgdG9rZW5MaXN0VVJJLCBuZXcgTm9kZUpTQ2FjaGUodG9rZW5DYWNoZSkpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRva2VuTGlzdCA9IEpTT04ucGFyc2UodG9rZW5MaXN0QnVmZmVyLnRvU3RyaW5nKCd1dGYtOCcpKSBhcyBUb2tlbkxpc3RcblxuICAgICAgbG9nLmluZm8oYEdvdCBib3RoIHRva2VuTGlzdHMgZnJvbSBzMy4gJHt0b2tlbkxpc3QudG9rZW5zLmxlbmd0aH0gdG9rZW5zIGluIG1haW4gbGlzdC5gKVxuXG4gICAgICBUT0tFTl9MSVNUX0NBQ0hFLnNldDxUb2tlbkxpc3Q+KHRva2VuTGlzdFVSSSwgdG9rZW5MaXN0KVxuXG4gICAgICByZXR1cm4gbmV3IENhY2hpbmdUb2tlbkxpc3RQcm92aWRlcihjaGFpbklkLCB0b2tlbkxpc3QsIG5ldyBOb2RlSlNDYWNoZSh0b2tlbkNhY2hlKSlcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy5pbmZvKHsgZXJyIH0sIGBGYWlsZWQgdG8gZ2V0IHRva2VuTGlzdHMgZnJvbSBzMy5gKVxuICAgICAgcmV0dXJuIHN1cGVyLmZyb21Ub2tlbkxpc3RVUkkoY2hhaW5JZCwgdG9rZW5MaXN0VVJJLCBuZXcgTm9kZUpTQ2FjaGUodG9rZW5DYWNoZSkpXG4gICAgfVxuICB9XG59XG4iXX0=