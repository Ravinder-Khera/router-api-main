import { ChainId, Percent } from '@uniswap/sdk-core';
import { MapWithLowerCaseKey, NATIVE_NAMES_BY_ID, nativeOnChain, } from '@uniswap/smart-order-router';
export const DEFAULT_ROUTING_CONFIG_BY_CHAIN = (chainId) => {
    switch (chainId) {
        case ChainId.OPTIMISM:
            return {
                v2PoolSelection: {
                    topN: 3,
                    topNDirectSwaps: 1,
                    topNTokenInOut: 5,
                    topNSecondHop: 2,
                    topNWithEachBaseToken: 2,
                    topNWithBaseToken: 6,
                },
                v3PoolSelection: {
                    topN: 2,
                    topNDirectSwaps: 2,
                    topNTokenInOut: 2,
                    topNSecondHop: 1,
                    topNWithEachBaseToken: 3,
                    topNWithBaseToken: 3,
                },
                maxSwapsPerPath: 3,
                minSplits: 1,
                maxSplits: 7,
                distributionPercent: 10,
                forceCrossProtocol: false,
            };
        // Arbitrum calls have lower gas limits and tend to timeout more, which causes us to reduce the multicall
        // batch size and send more multicalls per quote. To reduce the amount of requests each quote sends, we
        // have to adjust the routing config so we explore fewer routes.
        case ChainId.ARBITRUM_ONE:
            return {
                v2PoolSelection: {
                    topN: 3,
                    topNDirectSwaps: 1,
                    topNTokenInOut: 5,
                    topNSecondHop: 2,
                    topNWithEachBaseToken: 2,
                    topNWithBaseToken: 6,
                },
                v3PoolSelection: {
                    topN: 2,
                    topNDirectSwaps: 2,
                    topNTokenInOut: 2,
                    topNSecondHop: 1,
                    topNWithEachBaseToken: 3,
                    topNWithBaseToken: 2,
                },
                maxSwapsPerPath: 2,
                minSplits: 1,
                maxSplits: 7,
                distributionPercent: 25,
                forceCrossProtocol: false,
            };
        default:
            return {
                v2PoolSelection: {
                    topN: 3,
                    topNDirectSwaps: 1,
                    topNTokenInOut: 5,
                    topNSecondHop: 2,
                    topNWithEachBaseToken: 2,
                    topNWithBaseToken: 6,
                },
                v3PoolSelection: {
                    topN: 2,
                    topNDirectSwaps: 2,
                    topNTokenInOut: 3,
                    topNSecondHop: 1,
                    topNSecondHopForTokenAddress: new MapWithLowerCaseKey([
                        ['0x5f98805a4e8be255a32880fdec7f6728c6568ba0', 2], // LUSD
                    ]),
                    topNWithEachBaseToken: 3,
                    topNWithBaseToken: 5,
                },
                maxSwapsPerPath: 3,
                minSplits: 1,
                maxSplits: 7,
                distributionPercent: 5,
                forceCrossProtocol: false,
            };
    }
};
export async function tokenStringToCurrency(tokenListProvider, tokenProvider, tokenRaw, chainId, log) {
    const isAddress = (s) => s.length == 42 && s.startsWith('0x');
    let token = undefined;
    if (NATIVE_NAMES_BY_ID[chainId].includes(tokenRaw)) {
        token = nativeOnChain(chainId);
    }
    else if (isAddress(tokenRaw)) {
        token = await tokenListProvider.getTokenByAddress(tokenRaw);
    }
    if (!token) {
        token = await tokenListProvider.getTokenBySymbol(tokenRaw);
    }
    if (token) {
        log.info({
            tokenAddress: token.wrapped.address,
        }, `Got input token from token list`);
        return token;
    }
    log.info(`Getting input token ${tokenRaw} from chain`);
    if (!token && isAddress(tokenRaw)) {
        const tokenAccessor = await tokenProvider.getTokens([tokenRaw]);
        return tokenAccessor.getTokenByAddress(tokenRaw);
    }
    return undefined;
}
export function parseSlippageTolerance(slippageTolerance) {
    const slippagePer10k = Math.round(parseFloat(slippageTolerance) * 100);
    return new Percent(slippagePer10k, 10000);
}
export function parseDeadline(deadline) {
    return Math.floor(Date.now() / 1000) + parseInt(deadline);
}
//# sourceMappingURL=data:application/json;base64,