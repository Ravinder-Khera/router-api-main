import * as cdk from 'aws-cdk-lib';
import * as aws_dynamodb from 'aws-cdk-lib/aws-dynamodb';
import { AttributeType, BillingMode } from 'aws-cdk-lib/aws-dynamodb';
export const DynamoDBTableProps = {
    CacheRouteDynamoDbTable: {
        Name: 'RouteCachingDB',
        PartitionKeyName: 'pairTradeTypeChainId',
        SortKeyName: 'protocolsBucketBlockNumber',
    },
    V3PoolsDynamoDbTable: {
        Name: 'V3PoolsCachingDB',
        PartitionKeyName: 'poolAddress',
        SortKeyName: 'blockNumber',
    },
    TTLAttributeName: 'ttl',
};
export class RoutingDatabaseStack extends cdk.NestedStack {
    constructor(scope, name, props) {
        super(scope, name, props);
        // Creates a DynamoDB Table for storing the cached routes
        this.cachedRoutesDynamoDb = new aws_dynamodb.Table(this, DynamoDBTableProps.CacheRouteDynamoDbTable.Name, {
            tableName: DynamoDBTableProps.CacheRouteDynamoDbTable.Name,
            partitionKey: { name: DynamoDBTableProps.CacheRouteDynamoDbTable.PartitionKeyName, type: AttributeType.STRING },
            sortKey: { name: DynamoDBTableProps.CacheRouteDynamoDbTable.SortKeyName, type: AttributeType.STRING },
            billingMode: BillingMode.PAY_PER_REQUEST,
            timeToLiveAttribute: DynamoDBTableProps.TTLAttributeName,
        });
        // Creates a DynamoDB Table for storing the cached v3 pools
        this.cachedV3PoolsDynamoDb = new aws_dynamodb.Table(this, DynamoDBTableProps.V3PoolsDynamoDbTable.Name, {
            tableName: DynamoDBTableProps.V3PoolsDynamoDbTable.Name,
            partitionKey: { name: DynamoDBTableProps.V3PoolsDynamoDbTable.PartitionKeyName, type: AttributeType.STRING },
            sortKey: { name: DynamoDBTableProps.V3PoolsDynamoDbTable.SortKeyName, type: AttributeType.NUMBER },
            billingMode: BillingMode.PAY_PER_REQUEST,
            timeToLiveAttribute: DynamoDBTableProps.TTLAttributeName,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGluZy1kYXRhYmFzZS1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2Jpbi9zdGFja3Mvcm91dGluZy1kYXRhYmFzZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssR0FBRyxNQUFNLGFBQWEsQ0FBQTtBQUNsQyxPQUFPLEtBQUssWUFBWSxNQUFNLDBCQUEwQixDQUFBO0FBQ3hELE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFLckUsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUc7SUFDaEMsdUJBQXVCLEVBQUU7UUFDdkIsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QixnQkFBZ0IsRUFBRSxzQkFBc0I7UUFDeEMsV0FBVyxFQUFFLDRCQUE0QjtLQUMxQztJQUNELG9CQUFvQixFQUFFO1FBQ3BCLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsZ0JBQWdCLEVBQUUsYUFBYTtRQUMvQixXQUFXLEVBQUUsYUFBYTtLQUMzQjtJQUNELGdCQUFnQixFQUFFLEtBQUs7Q0FDeEIsQ0FBQTtBQUVELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxHQUFHLENBQUMsV0FBVztJQUl2RCxZQUFZLEtBQWdCLEVBQUUsSUFBWSxFQUFFLEtBQWdDO1FBQzFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBRXpCLHlEQUF5RDtRQUN6RCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxrQkFBa0IsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUU7WUFDeEcsU0FBUyxFQUFFLGtCQUFrQixDQUFDLHVCQUF1QixDQUFDLElBQUk7WUFDMUQsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixDQUFDLHVCQUF1QixDQUFDLGdCQUFnQixFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsTUFBTSxFQUFFO1lBQy9HLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxrQkFBa0IsQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxNQUFNLEVBQUU7WUFDckcsV0FBVyxFQUFFLFdBQVcsQ0FBQyxlQUFlO1lBQ3hDLG1CQUFtQixFQUFFLGtCQUFrQixDQUFDLGdCQUFnQjtTQUN6RCxDQUFDLENBQUE7UUFFRiwyREFBMkQ7UUFDM0QsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFO1lBQ3RHLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJO1lBQ3ZELFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsYUFBYSxDQUFDLE1BQU0sRUFBRTtZQUM1RyxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLENBQUMsb0JBQW9CLENBQUMsV0FBVyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsTUFBTSxFQUFFO1lBQ2xHLFdBQVcsRUFBRSxXQUFXLENBQUMsZUFBZTtZQUN4QyxtQkFBbUIsRUFBRSxrQkFBa0IsQ0FBQyxnQkFBZ0I7U0FDekQsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJ1xuaW1wb3J0ICogYXMgYXdzX2R5bmFtb2RiIGZyb20gJ2F3cy1jZGstbGliL2F3cy1keW5hbW9kYidcbmltcG9ydCB7IEF0dHJpYnV0ZVR5cGUsIEJpbGxpbmdNb2RlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWR5bmFtb2RiJ1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cydcblxuZXhwb3J0IGludGVyZmFjZSBSb3V0aW5nRGF0YWJhc2VTdGFja1Byb3BzIGV4dGVuZHMgY2RrLk5lc3RlZFN0YWNrUHJvcHMge31cblxuZXhwb3J0IGNvbnN0IER5bmFtb0RCVGFibGVQcm9wcyA9IHtcbiAgQ2FjaGVSb3V0ZUR5bmFtb0RiVGFibGU6IHtcbiAgICBOYW1lOiAnUm91dGVDYWNoaW5nREInLFxuICAgIFBhcnRpdGlvbktleU5hbWU6ICdwYWlyVHJhZGVUeXBlQ2hhaW5JZCcsXG4gICAgU29ydEtleU5hbWU6ICdwcm90b2NvbHNCdWNrZXRCbG9ja051bWJlcicsXG4gIH0sXG4gIFYzUG9vbHNEeW5hbW9EYlRhYmxlOiB7XG4gICAgTmFtZTogJ1YzUG9vbHNDYWNoaW5nREInLFxuICAgIFBhcnRpdGlvbktleU5hbWU6ICdwb29sQWRkcmVzcycsXG4gICAgU29ydEtleU5hbWU6ICdibG9ja051bWJlcicsXG4gIH0sXG4gIFRUTEF0dHJpYnV0ZU5hbWU6ICd0dGwnLFxufVxuXG5leHBvcnQgY2xhc3MgUm91dGluZ0RhdGFiYXNlU3RhY2sgZXh0ZW5kcyBjZGsuTmVzdGVkU3RhY2sge1xuICBwdWJsaWMgcmVhZG9ubHkgY2FjaGVkUm91dGVzRHluYW1vRGI6IGF3c19keW5hbW9kYi5UYWJsZVxuICBwdWJsaWMgcmVhZG9ubHkgY2FjaGVkVjNQb29sc0R5bmFtb0RiOiBhd3NfZHluYW1vZGIuVGFibGVcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBuYW1lOiBzdHJpbmcsIHByb3BzOiBSb3V0aW5nRGF0YWJhc2VTdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIG5hbWUsIHByb3BzKVxuXG4gICAgLy8gQ3JlYXRlcyBhIER5bmFtb0RCIFRhYmxlIGZvciBzdG9yaW5nIHRoZSBjYWNoZWQgcm91dGVzXG4gICAgdGhpcy5jYWNoZWRSb3V0ZXNEeW5hbW9EYiA9IG5ldyBhd3NfZHluYW1vZGIuVGFibGUodGhpcywgRHluYW1vREJUYWJsZVByb3BzLkNhY2hlUm91dGVEeW5hbW9EYlRhYmxlLk5hbWUsIHtcbiAgICAgIHRhYmxlTmFtZTogRHluYW1vREJUYWJsZVByb3BzLkNhY2hlUm91dGVEeW5hbW9EYlRhYmxlLk5hbWUsXG4gICAgICBwYXJ0aXRpb25LZXk6IHsgbmFtZTogRHluYW1vREJUYWJsZVByb3BzLkNhY2hlUm91dGVEeW5hbW9EYlRhYmxlLlBhcnRpdGlvbktleU5hbWUsIHR5cGU6IEF0dHJpYnV0ZVR5cGUuU1RSSU5HIH0sXG4gICAgICBzb3J0S2V5OiB7IG5hbWU6IER5bmFtb0RCVGFibGVQcm9wcy5DYWNoZVJvdXRlRHluYW1vRGJUYWJsZS5Tb3J0S2V5TmFtZSwgdHlwZTogQXR0cmlidXRlVHlwZS5TVFJJTkcgfSxcbiAgICAgIGJpbGxpbmdNb2RlOiBCaWxsaW5nTW9kZS5QQVlfUEVSX1JFUVVFU1QsXG4gICAgICB0aW1lVG9MaXZlQXR0cmlidXRlOiBEeW5hbW9EQlRhYmxlUHJvcHMuVFRMQXR0cmlidXRlTmFtZSxcbiAgICB9KVxuXG4gICAgLy8gQ3JlYXRlcyBhIER5bmFtb0RCIFRhYmxlIGZvciBzdG9yaW5nIHRoZSBjYWNoZWQgdjMgcG9vbHNcbiAgICB0aGlzLmNhY2hlZFYzUG9vbHNEeW5hbW9EYiA9IG5ldyBhd3NfZHluYW1vZGIuVGFibGUodGhpcywgRHluYW1vREJUYWJsZVByb3BzLlYzUG9vbHNEeW5hbW9EYlRhYmxlLk5hbWUsIHtcbiAgICAgIHRhYmxlTmFtZTogRHluYW1vREJUYWJsZVByb3BzLlYzUG9vbHNEeW5hbW9EYlRhYmxlLk5hbWUsXG4gICAgICBwYXJ0aXRpb25LZXk6IHsgbmFtZTogRHluYW1vREJUYWJsZVByb3BzLlYzUG9vbHNEeW5hbW9EYlRhYmxlLlBhcnRpdGlvbktleU5hbWUsIHR5cGU6IEF0dHJpYnV0ZVR5cGUuU1RSSU5HIH0sXG4gICAgICBzb3J0S2V5OiB7IG5hbWU6IER5bmFtb0RCVGFibGVQcm9wcy5WM1Bvb2xzRHluYW1vRGJUYWJsZS5Tb3J0S2V5TmFtZSwgdHlwZTogQXR0cmlidXRlVHlwZS5OVU1CRVIgfSxcbiAgICAgIGJpbGxpbmdNb2RlOiBCaWxsaW5nTW9kZS5QQVlfUEVSX1JFUVVFU1QsXG4gICAgICB0aW1lVG9MaXZlQXR0cmlidXRlOiBEeW5hbW9EQlRhYmxlUHJvcHMuVFRMQXR0cmlidXRlTmFtZSxcbiAgICB9KVxuICB9XG59XG4iXX0=