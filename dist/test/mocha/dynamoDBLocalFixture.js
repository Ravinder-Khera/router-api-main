import AWS, { DynamoDB } from 'aws-sdk';
import DDBLocal from 'dynamodb-local';
import { deleteAllTables } from './dbSetup';
process.env.AWS_ACCESS_KEY_ID = 'my_access_key';
process.env.AWS_SECRET_ACCESS_KEY = 'my_secret_key';
const dbPort = Number(process.env.DYNAMODB_LOCAL_PORT || 8000);
let dbInstance;
global['__DYNAMODB_LOCAL__'] = true;
export const mochaGlobalSetup = async () => {
    try {
        console.log('Starting DynamoDB');
        dbInstance = await DDBLocal.launch(dbPort, null);
        console.log('Started DynamoDB');
        const ddb = new DynamoDB({
            endpoint: `localhost:${dbPort}`,
            sslEnabled: false,
            region: 'local',
        });
        dbConnectionSetup();
        exportDDBInstance(ddb);
        await deleteAllTables();
    }
    catch (e) {
        console.log('Error instantiating DynamoDB', e);
    }
};
// Overrides the default config to use the local instance of DynamoDB in tests
export const dbConnectionSetup = () => {
    const config = AWS.config;
    const dynamoLocalPort = Number(process.env.DYNAMODB_LOCAL_PORT || 8000);
    config.endpoint = `localhost:${dynamoLocalPort}`;
    config.sslEnabled = false;
    config.region = 'local';
};
const exportDDBInstance = (ddb) => {
    ;
    global['__DYNAMODB_CLIENT__'] = ddb;
};
export const mochaGlobalTeardown = async () => {
    console.log('Stopping DynamoDB');
    if (dbInstance !== undefined) {
        await DDBLocal.stopChild(dbInstance);
    }
    console.log('Stopped DynamoDB');
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1vREJMb2NhbEZpeHR1cmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L21vY2hhL2R5bmFtb0RCTG9jYWxGaXh0dXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sR0FBRyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sU0FBUyxDQUFBO0FBRXZDLE9BQU8sUUFBUSxNQUFNLGdCQUFnQixDQUFBO0FBQ3JDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFFM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxlQUFlLENBQUE7QUFDL0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxlQUFlLENBQUE7QUFFbkQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLElBQUksSUFBSSxDQUFDLENBQUE7QUFFOUQsSUFBSSxVQUFvQyxDQUN2QztBQUFDLE1BQWMsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLElBQUksQ0FBQTtBQUU3QyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLElBQUksRUFBRTtJQUN6QyxJQUFJO1FBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1FBQ2hDLFVBQVUsR0FBRyxNQUFNLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUUvQixNQUFNLEdBQUcsR0FBRyxJQUFJLFFBQVEsQ0FBQztZQUN2QixRQUFRLEVBQUUsYUFBYSxNQUFNLEVBQUU7WUFDL0IsVUFBVSxFQUFFLEtBQUs7WUFDakIsTUFBTSxFQUFFLE9BQU87U0FDaEIsQ0FBQyxDQUFBO1FBRUYsaUJBQWlCLEVBQUUsQ0FBQTtRQUVuQixpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUV0QixNQUFNLGVBQWUsRUFBRSxDQUFBO0tBQ3hCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixFQUFFLENBQUMsQ0FBQyxDQUFBO0tBQy9DO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsOEVBQThFO0FBQzlFLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEdBQUcsRUFBRTtJQUNwQyxNQUFNLE1BQU0sR0FBUSxHQUFHLENBQUMsTUFBTSxDQUFBO0lBRTlCLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixJQUFJLElBQUksQ0FBQyxDQUFBO0lBQ3ZFLE1BQU0sQ0FBQyxRQUFRLEdBQUcsYUFBYSxlQUFlLEVBQUUsQ0FBQTtJQUNoRCxNQUFNLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQTtJQUN6QixNQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQTtBQUN6QixDQUFDLENBQUE7QUFFRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsR0FBYSxFQUFFLEVBQUU7SUFDMUMsQ0FBQztJQUFDLE1BQWMsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtBQUMvQyxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLElBQUksRUFBRTtJQUM1QyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUE7SUFDaEMsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1FBQzVCLE1BQU0sUUFBUSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQTtLQUNyQztJQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtBQUNqQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQVdTLCB7IER5bmFtb0RCIH0gZnJvbSAnYXdzLXNkaydcbmltcG9ydCB7IENoaWxkUHJvY2VzcyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnXG5pbXBvcnQgRERCTG9jYWwgZnJvbSAnZHluYW1vZGItbG9jYWwnXG5pbXBvcnQgeyBkZWxldGVBbGxUYWJsZXMgfSBmcm9tICcuL2RiU2V0dXAnXG5cbnByb2Nlc3MuZW52LkFXU19BQ0NFU1NfS0VZX0lEID0gJ215X2FjY2Vzc19rZXknXG5wcm9jZXNzLmVudi5BV1NfU0VDUkVUX0FDQ0VTU19LRVkgPSAnbXlfc2VjcmV0X2tleSdcblxuY29uc3QgZGJQb3J0ID0gTnVtYmVyKHByb2Nlc3MuZW52LkRZTkFNT0RCX0xPQ0FMX1BPUlQgfHwgODAwMClcblxubGV0IGRiSW5zdGFuY2U6IENoaWxkUHJvY2VzcyB8IHVuZGVmaW5lZFxuOyhnbG9iYWwgYXMgYW55KVsnX19EWU5BTU9EQl9MT0NBTF9fJ10gPSB0cnVlXG5cbmV4cG9ydCBjb25zdCBtb2NoYUdsb2JhbFNldHVwID0gYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCdTdGFydGluZyBEeW5hbW9EQicpXG4gICAgZGJJbnN0YW5jZSA9IGF3YWl0IEREQkxvY2FsLmxhdW5jaChkYlBvcnQsIG51bGwpXG4gICAgY29uc29sZS5sb2coJ1N0YXJ0ZWQgRHluYW1vREInKVxuXG4gICAgY29uc3QgZGRiID0gbmV3IER5bmFtb0RCKHtcbiAgICAgIGVuZHBvaW50OiBgbG9jYWxob3N0OiR7ZGJQb3J0fWAsXG4gICAgICBzc2xFbmFibGVkOiBmYWxzZSxcbiAgICAgIHJlZ2lvbjogJ2xvY2FsJyxcbiAgICB9KVxuXG4gICAgZGJDb25uZWN0aW9uU2V0dXAoKVxuXG4gICAgZXhwb3J0RERCSW5zdGFuY2UoZGRiKVxuXG4gICAgYXdhaXQgZGVsZXRlQWxsVGFibGVzKClcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKCdFcnJvciBpbnN0YW50aWF0aW5nIER5bmFtb0RCJywgZSlcbiAgfVxufVxuXG4vLyBPdmVycmlkZXMgdGhlIGRlZmF1bHQgY29uZmlnIHRvIHVzZSB0aGUgbG9jYWwgaW5zdGFuY2Ugb2YgRHluYW1vREIgaW4gdGVzdHNcbmV4cG9ydCBjb25zdCBkYkNvbm5lY3Rpb25TZXR1cCA9ICgpID0+IHtcbiAgY29uc3QgY29uZmlnOiBhbnkgPSBBV1MuY29uZmlnXG5cbiAgY29uc3QgZHluYW1vTG9jYWxQb3J0ID0gTnVtYmVyKHByb2Nlc3MuZW52LkRZTkFNT0RCX0xPQ0FMX1BPUlQgfHwgODAwMClcbiAgY29uZmlnLmVuZHBvaW50ID0gYGxvY2FsaG9zdDoke2R5bmFtb0xvY2FsUG9ydH1gXG4gIGNvbmZpZy5zc2xFbmFibGVkID0gZmFsc2VcbiAgY29uZmlnLnJlZ2lvbiA9ICdsb2NhbCdcbn1cblxuY29uc3QgZXhwb3J0RERCSW5zdGFuY2UgPSAoZGRiOiBEeW5hbW9EQikgPT4ge1xuICA7KGdsb2JhbCBhcyBhbnkpWydfX0RZTkFNT0RCX0NMSUVOVF9fJ10gPSBkZGJcbn1cblxuZXhwb3J0IGNvbnN0IG1vY2hhR2xvYmFsVGVhcmRvd24gPSBhc3luYyAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKCdTdG9wcGluZyBEeW5hbW9EQicpXG4gIGlmIChkYkluc3RhbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICBhd2FpdCBEREJMb2NhbC5zdG9wQ2hpbGQoZGJJbnN0YW5jZSlcbiAgfVxuICBjb25zb2xlLmxvZygnU3RvcHBlZCBEeW5hbW9EQicpXG59XG4iXX0=