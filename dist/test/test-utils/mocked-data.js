import { encodeSqrtRatioX96, Pool } from '@uniswap/v3-sdk';
import { FeeAmount } from '../utils/ticks';
import { DAI_MAINNET as DAI, USDC_MAINNET as USDC, USDT_MAINNET as USDT, WRAPPED_NATIVE_CURRENCY, } from '@uniswap/smart-order-router/build/main/index';
import _ from 'lodash';
export const USDC_DAI_LOW = new Pool(USDC, DAI, FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 10, 0);
export const USDC_DAI_MEDIUM = new Pool(USDC, DAI, FeeAmount.MEDIUM, encodeSqrtRatioX96(1, 1), 8, 0);
export const USDC_WETH_LOW = new Pool(USDC, WRAPPED_NATIVE_CURRENCY[1], FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 500, 0);
export const WETH9_USDT_LOW = new Pool(WRAPPED_NATIVE_CURRENCY[1], USDT, FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 200, 0);
export const DAI_USDT_LOW = new Pool(DAI, USDT, FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 10, 0);
export const SUPPORTED_POOLS = [USDC_DAI_LOW, USDC_DAI_MEDIUM, USDC_WETH_LOW, WETH9_USDT_LOW, DAI_USDT_LOW];
export const buildMockV3PoolAccessor = (pools) => {
    return {
        getAllPools: () => pools,
        getPoolByAddress: (address) => _.find(pools, (p) => Pool.getAddress(p.token0, p.token1, p.fee).toLowerCase() == address.toLowerCase()),
        getPool: (tokenA, tokenB, fee) => _.find(pools, (p) => Pool.getAddress(p.token0, p.token1, p.fee) == Pool.getAddress(tokenA, tokenB, fee)),
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja2VkLWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L3Rlc3QtdXRpbHMvbW9ja2VkLWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQzFELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUMxQyxPQUFPLEVBQ0wsV0FBVyxJQUFJLEdBQUcsRUFDbEIsWUFBWSxJQUFJLElBQUksRUFDcEIsWUFBWSxJQUFJLElBQUksRUFDcEIsdUJBQXVCLEdBQ3hCLE1BQU0sOENBQThDLENBQUE7QUFFckQsT0FBTyxDQUFDLE1BQU0sUUFBUSxDQUFBO0FBRXRCLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUMvRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFLGtCQUFrQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDcEcsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLElBQUksSUFBSSxDQUNuQyxJQUFJLEVBQ0osdUJBQXVCLENBQUMsQ0FBQyxDQUFFLEVBQzNCLFNBQVMsQ0FBQyxHQUFHLEVBQ2Isa0JBQWtCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUN4QixHQUFHLEVBQ0gsQ0FBQyxDQUNGLENBQUE7QUFDRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsSUFBSSxJQUFJLENBQ3BDLHVCQUF1QixDQUFDLENBQUMsQ0FBRSxFQUMzQixJQUFJLEVBQ0osU0FBUyxDQUFDLEdBQUcsRUFDYixrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQ3hCLEdBQUcsRUFDSCxDQUFDLENBQ0YsQ0FBQTtBQUNELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUMvRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQVcsQ0FBQyxZQUFZLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsWUFBWSxDQUFDLENBQUE7QUFFbkgsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQXNDLENBQUMsS0FBYSxFQUFFLEVBQUU7SUFDMUYsT0FBTztRQUNMLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLO1FBQ3hCLGdCQUFnQixFQUFFLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FDcEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDekcsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUMvQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztLQUMzRyxDQUFBO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZW5jb2RlU3FydFJhdGlvWDk2LCBQb29sIH0gZnJvbSAnQHVuaXN3YXAvdjMtc2RrJ1xuaW1wb3J0IHsgRmVlQW1vdW50IH0gZnJvbSAnLi4vdXRpbHMvdGlja3MnXG5pbXBvcnQge1xuICBEQUlfTUFJTk5FVCBhcyBEQUksXG4gIFVTRENfTUFJTk5FVCBhcyBVU0RDLFxuICBVU0RUX01BSU5ORVQgYXMgVVNEVCxcbiAgV1JBUFBFRF9OQVRJVkVfQ1VSUkVOQ1ksXG59IGZyb20gJ0B1bmlzd2FwL3NtYXJ0LW9yZGVyLXJvdXRlci9idWlsZC9tYWluL2luZGV4J1xuaW1wb3J0IHsgVjNQb29sQWNjZXNzb3IgfSBmcm9tICdAdW5pc3dhcC9zbWFydC1vcmRlci1yb3V0ZXIvYnVpbGQvbWFpbi9wcm92aWRlcnMvdjMvcG9vbC1wcm92aWRlcidcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCdcblxuZXhwb3J0IGNvbnN0IFVTRENfREFJX0xPVyA9IG5ldyBQb29sKFVTREMsIERBSSwgRmVlQW1vdW50LkxPVywgZW5jb2RlU3FydFJhdGlvWDk2KDEsIDEpLCAxMCwgMClcbmV4cG9ydCBjb25zdCBVU0RDX0RBSV9NRURJVU0gPSBuZXcgUG9vbChVU0RDLCBEQUksIEZlZUFtb3VudC5NRURJVU0sIGVuY29kZVNxcnRSYXRpb1g5NigxLCAxKSwgOCwgMClcbmV4cG9ydCBjb25zdCBVU0RDX1dFVEhfTE9XID0gbmV3IFBvb2woXG4gIFVTREMsXG4gIFdSQVBQRURfTkFUSVZFX0NVUlJFTkNZWzFdISxcbiAgRmVlQW1vdW50LkxPVyxcbiAgZW5jb2RlU3FydFJhdGlvWDk2KDEsIDEpLFxuICA1MDAsXG4gIDBcbilcbmV4cG9ydCBjb25zdCBXRVRIOV9VU0RUX0xPVyA9IG5ldyBQb29sKFxuICBXUkFQUEVEX05BVElWRV9DVVJSRU5DWVsxXSEsXG4gIFVTRFQsXG4gIEZlZUFtb3VudC5MT1csXG4gIGVuY29kZVNxcnRSYXRpb1g5NigxLCAxKSxcbiAgMjAwLFxuICAwXG4pXG5leHBvcnQgY29uc3QgREFJX1VTRFRfTE9XID0gbmV3IFBvb2woREFJLCBVU0RULCBGZWVBbW91bnQuTE9XLCBlbmNvZGVTcXJ0UmF0aW9YOTYoMSwgMSksIDEwLCAwKVxuZXhwb3J0IGNvbnN0IFNVUFBPUlRFRF9QT09MUzogUG9vbFtdID0gW1VTRENfREFJX0xPVywgVVNEQ19EQUlfTUVESVVNLCBVU0RDX1dFVEhfTE9XLCBXRVRIOV9VU0RUX0xPVywgREFJX1VTRFRfTE9XXVxuXG5leHBvcnQgY29uc3QgYnVpbGRNb2NrVjNQb29sQWNjZXNzb3I6IChwb29sczogUG9vbFtdKSA9PiBWM1Bvb2xBY2Nlc3NvciA9IChwb29sczogUG9vbFtdKSA9PiB7XG4gIHJldHVybiB7XG4gICAgZ2V0QWxsUG9vbHM6ICgpID0+IHBvb2xzLFxuICAgIGdldFBvb2xCeUFkZHJlc3M6IChhZGRyZXNzOiBzdHJpbmcpID0+XG4gICAgICBfLmZpbmQocG9vbHMsIChwKSA9PiBQb29sLmdldEFkZHJlc3MocC50b2tlbjAsIHAudG9rZW4xLCBwLmZlZSkudG9Mb3dlckNhc2UoKSA9PSBhZGRyZXNzLnRvTG93ZXJDYXNlKCkpLFxuICAgIGdldFBvb2w6ICh0b2tlbkEsIHRva2VuQiwgZmVlKSA9PlxuICAgICAgXy5maW5kKHBvb2xzLCAocCkgPT4gUG9vbC5nZXRBZGRyZXNzKHAudG9rZW4wLCBwLnRva2VuMSwgcC5mZWUpID09IFBvb2wuZ2V0QWRkcmVzcyh0b2tlbkEsIHRva2VuQiwgZmVlKSksXG4gIH1cbn1cbiJdfQ==